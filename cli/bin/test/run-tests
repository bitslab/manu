#!/bin/bash

set -euo pipefail

if [[ "${MAVEN_CMD_LINE_ARGS:-}" == *"-DskipTests"* ]]; then
  exit 0
fi


here=$(dirname "${BASH_SOURCE[0]}")
here=$(readlink -f "$here")

# shellcheck source=cli/bin/test/lib.sh
. "$here"/lib.sh

tmpdir=$(mktemp --directory run_tests.XXXX)
function finish {
  rm -rf "$tmpdir"
}
trap finish EXIT

if [ ! -v coverage ]; then
  export coverage=1
fi

function tabsify {
  f=${1:?must provide file}
  tr ' ' '\t' < "$f" > "$f".tabs
  mv "$f".tabs "$f"
}

function test_ensure_keys_no_args_is_error {
  run "$here"/../ensure-keys

  assert_exit_code 1
}

function test_ensure_keys_can_add_key_from_stdin {
  echo "x" | run "$here"/../ensure-keys /tmp/foo.bar

  assert_exit_code 0
}

function test_write_no_args_is_error {
  run "$here"/../write

  assert_exit_code 1
}

function test_write_no_fields_is_error {
  run "$here"/../write keys.index output.file 1970-01-01 hour

  assert_exit_code 1
}

function test_write {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file".spaces <<EOF
a 1 1 1
b 123 123 123
c 456 456 456
EOF
  tr ' ' '\t' < "$pvs_file".spaces > "$pvs_file"

  awk -F $'\t' '{print $1}' "$pvs_file" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01T00:00.002 hour --lossy pageviews "$pvs_file"
  assert_exit_code 0

  run "$here"/../read "$keys_index" "$output_file"
  assert_exit_code 0

  "$here"/../read "$keys_index" "$output_file" > "$tmpdir"/roundtrip
  run diff "$pvs_file" "$tmpdir"/roundtrip
  assert_exit_code 0
}

function test_write_invalid_input {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file" <<EOF
a
EOF

  run "$here"/../ensure-keys "$keys_index" < "$pvs_file"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01T00:00.002 hour --fixed1 pageviews "$pvs_file"
  assert_exit_code 1
}

function test_write_unknown_key {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file" <<EOF
b 1
EOF
  tabsify "$pvs_file"  

  echo "a" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01T00:00.002 hour --fixed1 pageviews "$pvs_file"
  assert_exit_code 1
}

function test_write_unknown_key_int {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file" <<EOF
123 1
EOF
  tabsify "$pvs_file"  

  echo "a" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01T00:00.002 hour --id pageviews "$pvs_file"
  assert_exit_code 1
}


function test_write_int_key {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file" <<EOF
0 1
EOF
  tabsify "$pvs_file"  

  echo "a" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01T00:00.002 hour --id --fixed1 pageviews "$pvs_file"
  assert_exit_code 0

  run "$here"/../read "$keys_index" "$output_file" --key-name "a"
  assert_exit_code 0

  "$here"/../read "$keys_index" "$output_file" --id --key-name "a" > "$tmpdir"/out
  run diff "$tmpdir"/out "$pvs_file"
  assert_exit_code 0

  "$here"/../read "$keys_index" "$output_file" --id --key-id 0 > "$tmpdir"/out
  run diff "$tmpdir"/out "$pvs_file"
  assert_exit_code 0

  "$here"/../read "$keys_index" "$output_file" --id --key-regex a > "$tmpdir"/out
  run diff "$tmpdir"/out "$pvs_file"
  assert_exit_code 0

  "$here"/../read "$keys_index" "$output_file" --id --key-regex b > "$tmpdir"/out
  run diff "$tmpdir"/out "$pvs_file"
  assert_exit_code 1



  "$here"/../read "$keys_index" "$output_file" --key-name "a" | sed -e 's/a/0/' > "$tmpdir"/out
  run diff "$tmpdir"/out "$pvs_file"
}

function test_write_two_fields {
  pvs_file="$tmpdir"/pvs.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file".spaces <<EOF
a 1 2 3
b 123 123 123
c 456 456 456
EOF
  tr ' ' '\t' < "$pvs_file".spaces > "$pvs_file"

  awk -F $'\t' '{print $1}' "$pvs_file" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01 hour pageviews "$pvs_file" --fixed2 edits "$pvs_file"
  assert_exit_code 0
}

function test_write_two_fields_uneven {
  pvs_file="$tmpdir"/pvs.file
  pvs2_file="$tmpdir"/pvs2.file
  keys_index="$tmpdir"/keys.index
  output_file="$tmpdir"/output
  cat > "$pvs_file".spaces <<EOF
a 1 2 3
EOF
  tr ' ' '\t' < "$pvs_file".spaces > "$pvs_file"

  cat > "$pvs2_file".spaces <<EOF
a 1 2
EOF
  tr ' ' '\t' < "$pvs2_file".spaces > "$pvs2_file"


  awk -F $'\t' '{print $1}' "$pvs_file" | run "$here"/../ensure-keys "$keys_index"
  assert_exit_code 0

  run "$here"/../write "$keys_index" "$output_file" 1970-01-01 hour --lossy pageviews "$pvs_file" --fixed2 edits "$pvs2_file"
  assert_exit_code 1
}

function test_read_no_args_is_error {
  run "$here"/../read

  assert_exit_code 1
}



function run_test {
  fn="$1"
  reset_test
  rm -rf "$tmpdir"
  mkdir -p "$tmpdir"
  echo "Test: $fn"
  "$fn"
  log_if_errors
  return "$test_result"
}


rv=0
if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    fn="$1"
    shift
    if ! run_test "$fn"; then
      rv=1
    fi
  done
else
  while read -r fn; do
    if ! run_test "$fn"; then
      rv=1
    fi
  done < <(find_tests)
fi

exit "$rv"
