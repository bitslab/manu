#!/bin/bash

set -euo pipefail

manu_version="0.2.1"

me=${BASH_SOURCE[0]}
me=$(readlink -f "$me")
here=$(dirname "$me")

tmp=$(mktemp --tmpdir configure.XXXXXX)
tmp2=$(mktemp --tmpdir configure.XXXXXX)
function finish {
  local rv=$?
  rm -f "$tmp" "$tmp2"

  if [ "$rv" -ne "0" ]; then
    echo -e "\e[91mThere were errors."
  fi
}
trap finish EXIT

set_name() {
  local name
  name=${1:-${FUNCNAME[1]}}
  echo "$name" > "$tmp2"
}

set_name "$(basename "$me")"

err() {
  echo "$(basename "$me"): $1" >&2
}

ensure_java() {
  set_name
  apt-get install openjdk-8-jdk-headless
}

ensure_htop() {
  set_name
  apt-get install htop
}

ensure_runit() {
  set_name
  apt-get install runit
}

ensure_manu() {
  set_name
  local thing file
  for thing in manu-serve manu-cli; do
    file="$thing"-"$manu_version".jar
    if [ ! -e /usr/bin/"$file" ]; then
      wget https://repo.maven.apache.org/maven2/com/cldellow/"$thing"/"$manu_version"/"$file" -O /usr/bin/"$file"
    fi

    chmod a+x /usr/bin/"$file"
    ln -sf /usr/bin/"$file" /usr/bin/"$thing"
  done

  mkdir -p /var/log/manu-serve
  sv restart manu-serve
}

ensure_s3cmd() {
  set_name
  apt-get install s3cmd
}

ensure_manu_data() {
  ensure_s3cmd
  set_name
  mkdir -p /var/local/manu/datadir
 
  s3cmd sync s3://manu-data/live/ /var/local/manu/datadir/
}

ensure_nginx() {
  set_name
  apt-get install nginx
  # Disable the standard "Welcome to nginx" site
  if [ -e /etc/nginx/sites-enabled/default ]; then
    rm /etc/nginx/sites-enabled/default
  fi

  s3cmd get --force s3://manu-data/keys/dhparam.pem /etc/nginx/dhparam.pem;
  s3cmd get --force s3://manu-data/keys/cldellow.com/fullchain.pem /etc/nginx/fullchain.pem;
  s3cmd get --force s3://manu-data/keys/cldellow.com/privkey.pem /etc/nginx/privkey.pem;
  nginx -t
  /etc/init.d/nginx reload
}

ensure_certbot() {
  # Run on the dev box to renew SSL certificates.
  set_name
  apt-get install software-properties-common
  add-apt-repository ppa:certbot/certbot
  apt-get update
  apt-get install certbot
  apt-get install python-pip
  pip install future
  pip install certbot-external-auth
}

renew_certs() {
  # Usage:
  # ./configure publish droplet renew_certs
  ensure_certbot
  certbot certonly --webroot \
    -w /var/www/certbot/ \
    -d www.cldellow.com \
    -d cldellow.com \
    -d manu.cldellow.com \
    -d certbot.cldellow.com

  now=$(TZ=UTC date -Iseconds | tr -d ':-' | sed -e 's/+.*//')
  for x in fullchain.pem privkey.pem; do
    f=$(readlink -f /etc/letsencrypt/live/www.cldellow.com/"$x")
    s3cmd put "$f" s3://manu-data/keys/cldellow.com/"$x"
    s3cmd put "$f" s3://manu-data/keys/cldellow.com/"$now"/"$x"
  done
}

ensure_varnish() {
  set_name
  apt-get install varnish
  systemctl daemon-reload
  service varnish restart
}

fn_update() {
  exec > >(while read -r ln; do printf "\e[90m%-16s>\e[39m %s\\n" "$(cat "$tmp2")" "$ln"; done)
  exec 2> >(while read -r ln; do printf "\e[91m%-16s>\e[39m %s\\n" "$(cat "$tmp2")" "$ln" >&2; done)

  if ifconfig | grep --silent addr:192.168; then
    err "doesn't look like we're on a droplet, giving up"
    exit 1
  fi

  # Ensure apt-get update has been run recently
  touch --date '2 hours ago' /var/run/last-update-test
  if [ /var/run/last-update-test -nt /var/run/last-update ]; then
    apt-get update
    touch /var/run/last-update
  fi

  if [ -e /var/run/reboot-required ]; then
    reboot
  fi

  ensure_htop
  ensure_java
  ensure_manu
  ensure_manu_data
  ensure_runit
  ensure_nginx
  ensure_varnish
}

fn_publish() {
  target=${1:-droplet}
  # Bootstrap a droplet's filesystems with S3 credentials and a script
  # to install services.
  ( cd "$here" && tar cf "$tmp" . )
  local home
  home=${HOME#/}
  tar --append -f "$tmp" --transform "flags=r;s|$home/.s3cld|root/.s3cfg|" ~/.s3cld

  # Remove vim .swp files
  # CONSIDER: maybe use git ls-files to generate the list of files?
  tar tf "$tmp" |
    grep "\\.swp$" |
    xargs --no-run-if-empty tar --delete -f "$tmp"
  gzip -9 - < "$tmp" | ssh "$target" -- tar xzf - -C / --no-same-permissions
  echo "Published $(tar tf "$tmp" | wc -l) files."

  if [ $# -eq 2 ]; then
    # shellcheck disable=SC2029
    ssh "$target" -- /configure "do" "$2"
  else
    ssh "$target" -- /configure update
  fi
}

fn_do() {
  "$@"
}

fn_() {
  err "usage: ./configure <cmd>"
  err "  publish - send script to droplet (run this on dev box)"
  err "  update - provision droplet"
  exit 1
}

#shellcheck disable=SC2145
fn_"$@"
